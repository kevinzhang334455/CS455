#!/usr/bin/ruby

$Passes = $Passes || Array.new
inst_count_pass = Proc.new do |prog|
  # only one module in a program
  prog.each { |func|
    # skip function declaration
     next if not func.is_a?Ast::Func or func.body == nil
    # next if func.is_a?Ast::Scope or func.is_a?Ast::Func
    #########################################################
    # TODO: 
    # The following two lines demostrate how to count function
    # invocations. You should replace them with your code for
    # counting AssignStat and GotoStat statements.
    #
      $instr_array = Array.new
      func.each do |f| 
      if f.is_a?Ast::AssignStat and not f.rhs.c_dump.slice("cs255_inc") != nil
	$instr_array.push f
      end
      if f.is_a?Ast::GotoStat
	$instr_array.push f
      end
     end
     $instr_array.each do |i|
       call_inc = Ast::AssignStat.new(Ast::Call.new("cs255_inc"))
       call_inc.insert_me("before", i)
     end
  
    #########################################################
    if func.id == "main"
      call_init = Ast::AssignStat.new(Ast::Call.new("cs255_init"))
      call_init.insert_me("after", func.body.child(0))
    end
  }
end

$Passes.unshift ["InstCount", inst_count_pass]

 load 'cfg'
# load 'urcc'
