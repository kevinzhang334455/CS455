#!/usr/bin/ruby

# repository root
repos_root = File.expand_path( File.dirname(__FILE__) )
while not File.exist? File.join(repos_root, ".hg")
  repos_root = File.split(repos_root)[0]
end
Repos_root = repos_root

# URCC directory
if not Module.const_defined?(:Urcc_path)
  Urcc_path = File.join(Repos_root, 'urcc')
  $LOAD_PATH.unshift(Urcc_path+"/src")
end

LLVM_PATH = "/localdisk/cs255/llvm-3.3/bin"
YOUR_CLANG = LLVM_PATH + "/clang"
YOUR_LLVM_OPT = LLVM_PATH + "/opt"

# 
YOUR_CC = "gcc"

# The main driver for our urcc
require "ir/urccfe.rb"

def execute( cmd )
  puts " #{cmd}"
  `#{cmd}`
end

def main
  filename = ARGV[0]
  if not filename or filename[-2..-1] != ".c" then
    puts "Please specify a C file."
    return
  end

  if not File.file?(filename) then
    puts "File #{filename} does not exist."
    return
  end
  
  bitcode_file = "#{filename}.ll"

  # generate LLVM intermediate file if it does not exist
  if not File.exists? bitcode_file
    if not File.file?(YOUR_CLANG) or not File.file?(YOUR_LLVM_OPT)
      puts "Invalid clang/llvm path."
      return
    end

    clangversion = `#{YOUR_CLANG} --version`.split
    if not ['3.3', '3.4'].include? clangversion[2]
      puts "Please use clang 3.3+"
      return
    end 

    execute "#{YOUR_CLANG} -O0 -emit-llvm -c #{filename} -o - | #{YOUR_LLVM_OPT} -reg2mem -S -o #{bitcode_file}"
  end

  lib_path = File.join(Repos_root, 'assignments', '3_vn', 'base')

  prog = URCCFE.new(bitcode_file).astroot

  unopt_file = File.split(filename[0..-3]+"_urcc.orig.c")[1]
  file = File.new(unopt_file, "w")
  file << URCCFE.dump_prog(prog)
  file.close

  ######################################################
  # Optimizations are here for "prog"

  if $Passes != nil
    $Passes.each do |opt| 
      puts "Invoking #{opt[0]} pass"
      opt[1].call( prog )
    end
  else
    puts 'No optimization specified'
  end

  ######################################################

  opt_file = File.split(filename[0..-3]+"_urcc.c")[1]
  file = File.new(opt_file, "w")
  file << "#include \"cs255lib.h\"\n"
  file << URCCFE.dump_prog(prog)
  file.close
  
  binary_file = opt_file[0..-3] + ".bin"
  puts "Generating binary '#{binary_file}'"
  execute "#{YOUR_CC} -O0 -g -Wno-format-security -Wno-implicit-function-declaration -I#{lib_path} #{lib_path+'/cs255lib.c'} #{opt_file} -o #{binary_file}"

end

main
