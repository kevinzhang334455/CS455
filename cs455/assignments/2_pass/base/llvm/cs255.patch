diff -ruN llvm-3.0.src/lib/Transforms/CMakeLists.txt llvm-3.0.src-cs255.new/lib/Transforms/CMakeLists.txt
--- llvm-3.0.src/lib/Transforms/CMakeLists.txt	2011-02-18 17:06:14.000000000 -0500
+++ llvm-3.0.src-cs255.new/lib/Transforms/CMakeLists.txt	2012-01-30 15:36:33.449573038 -0500
@@ -4,3 +4,4 @@
 add_subdirectory(Scalar)
 add_subdirectory(IPO)
 add_subdirectory(Hello)
+add_subdirectory(Cs255)
Binary files llvm-3.0.src/lib/Transforms/Cs255/._CMakeLists.txt and llvm-3.0.src-cs255.new/lib/Transforms/Cs255/._CMakeLists.txt differ
diff -ruN llvm-3.0.src/lib/Transforms/Cs255/CMakeLists.txt llvm-3.0.src-cs255.new/lib/Transforms/Cs255/CMakeLists.txt
--- llvm-3.0.src/lib/Transforms/Cs255/CMakeLists.txt	1969-12-31 19:00:00.000000000 -0500
+++ llvm-3.0.src-cs255.new/lib/Transforms/Cs255/CMakeLists.txt	2012-01-30 14:54:37.530533397 -0500
@@ -0,0 +1,3 @@
+add_llvm_loadable_module( Cs255
+  Cs255.cpp
+  )
diff -ruN llvm-3.0.src/lib/Transforms/Cs255/Cs255.cpp llvm-3.0.src-cs255.new/lib/Transforms/Cs255/Cs255.cpp
--- llvm-3.0.src/lib/Transforms/Cs255/Cs255.cpp	1969-12-31 19:00:00.000000000 -0500
+++ llvm-3.0.src-cs255.new/lib/Transforms/Cs255/Cs255.cpp	2012-01-30 14:54:37.531533449 -0500
@@ -0,0 +1,96 @@
+//===- Hello.cpp - Example code from "Writing an LLVM Pass" ---------------===//
+//
+//                     The LLVM Compiler Infrastructure
+//
+// This file is distributed under the University of Illinois Open Source
+// License. See LICENSE.TXT for details.
+//
+//===----------------------------------------------------------------------===//
+//
+// This file implements two versions of the LLVM "Hello World" pass described
+// in docs/WritingAnLLVMPass.html
+//
+//===----------------------------------------------------------------------===//
+
+#define DEBUG_TYPE "cs255"
+#include "llvm/Pass.h"
+#include "llvm/Function.h"
+#include "llvm/Type.h"
+#include "llvm/Module.h"
+#include "llvm/Instructions.h"
+#include "llvm/Support/raw_ostream.h"
+#include "llvm/ADT/Statistic.h"
+
+using namespace llvm;
+
+namespace {
+  struct Cs255 : public ModulePass {
+    static char ID; // Pass identification, replacement for typeid
+    Cs255() : ModulePass(ID) {}
+
+    /* Insert init() at the entry of main(). */
+    void InsertInitCall(Function *MainFn, const char *FnName) {
+      LLVMContext &Context = MainFn->getContext();
+      Type *VoidTy = Type::getVoidTy(Context);
+      Module &M = *MainFn->getParent();
+      Constant *InitFn = M.getOrInsertFunction(FnName, VoidTy, (Type *)0);
+
+      BasicBlock *Entry = MainFn->begin();
+      BasicBlock::iterator InsertPos = Entry->begin();
+      while (isa<AllocaInst>(InsertPos)) ++InsertPos;
+      CallInst::Create(InitFn, "", InsertPos);
+    }
+
+    /* Insert inc() before InsertPos. */
+    void InsertIncCall(Function *Fn, const char *FnName, Instruction *InsertPos) {
+      LLVMContext &Context = Fn->getContext();
+      Type *VoidTy = Type::getVoidTy(Context);
+      Module &M = *Fn->getParent();
+      Constant *IncFn = M.getOrInsertFunction(FnName, VoidTy, (Type *)0);
+
+      CallInst::Create(IncFn, "", InsertPos);
+    }
+
+    /* Insert output() before all return instructions. A return
+       instruction is generated at the end of a function. */
+    void InsertOutputCall(Function *MainFn, const char *FnName) {
+      LLVMContext &Context = MainFn->getContext();
+      Type *VoidTy = Type::getVoidTy(Context);
+      Module &M = *MainFn->getParent();
+      Constant *OutputFn = M.getOrInsertFunction(FnName, VoidTy, (Type *)0);
+
+      BasicBlock *BB;
+      for (Function::iterator FI = MainFn->begin(), FE = MainFn->end(); FI != FE;) {
+	BB = FI++;
+	BasicBlock::iterator InsertPos = BB->getTerminator();
+	if (isa<ReturnInst>(InsertPos))
+	  CallInst::Create(OutputFn, "", InsertPos);
+      }
+
+    }
+
+    virtual bool runOnModule(Module &M) {
+      Function *Main = M.getFunction("main");
+
+      for (Module::iterator MI = M.begin(), ME = M.end(); MI != ME;) {
+	Function *F = MI++;
+	for (Function::iterator FI = F->begin(), FE = F->end(); FI != FE;) {
+	  BasicBlock *BB = FI++;
+	  InsertIncCall(F, "inc", BB->begin());
+	  /* The way to traverse instructions in a basic block
+	  for (BasicBlock::iterator BI = BB->begin(), 
+		 BE = BB->end(); BI != BE; ) {
+	    Instruction *Inst = BI++;
+	  } */
+	}
+      }
+      
+      InsertInitCall(Main, "init");
+      InsertOutputCall(Main, "output");
+      return true;
+    }
+  };
+}
+
+char Cs255::ID = 0;
+static RegisterPass<Cs255> X("cs255", "Cs255 Class Project Pass");
Binary files llvm-3.0.src/lib/Transforms/Cs255/._Cs255.exports and llvm-3.0.src-cs255.new/lib/Transforms/Cs255/._Cs255.exports differ
diff -ruN llvm-3.0.src/lib/Transforms/Cs255/Makefile llvm-3.0.src-cs255.new/lib/Transforms/Cs255/Makefile
--- llvm-3.0.src/lib/Transforms/Cs255/Makefile	1969-12-31 19:00:00.000000000 -0500
+++ llvm-3.0.src-cs255.new/lib/Transforms/Cs255/Makefile	2012-01-30 14:54:37.530533397 -0500
@@ -0,0 +1,24 @@
+##===- lib/Transforms/Hello/Makefile -----------------------*- Makefile -*-===##
+#
+#                     The LLVM Compiler Infrastructure
+#
+# This file is distributed under the University of Illinois Open Source
+# License. See LICENSE.TXT for details.
+#
+##===----------------------------------------------------------------------===##
+
+LEVEL = ../../..
+LIBRARYNAME = Cs255
+LOADABLE_MODULE = 1
+USEDLIBS =
+
+# If we don't need RTTI or EH, there's no reason to export anything
+# from the hello plugin.
+ifneq ($(REQUIRES_RTTI), 1)
+ifneq ($(REQUIRES_EH), 1)
+EXPORTED_SYMBOL_FILE = $(PROJ_SRC_DIR)/Cs255.exports
+endif
+endif
+
+include $(LEVEL)/Makefile.common
+
Binary files llvm-3.0.src/lib/Transforms/Cs255/._Makefile and llvm-3.0.src-cs255.new/lib/Transforms/Cs255/._Makefile differ
diff -ruN llvm-3.0.src/lib/Transforms/Makefile llvm-3.0.src-cs255.new/lib/Transforms/Makefile
--- llvm-3.0.src/lib/Transforms/Makefile	2010-04-15 15:51:42.000000000 -0400
+++ llvm-3.0.src-cs255.new/lib/Transforms/Makefile	2012-01-30 15:36:46.954326945 -0500
@@ -8,7 +8,7 @@
 ##===----------------------------------------------------------------------===##
 
 LEVEL = ../..
-PARALLEL_DIRS = Utils Instrumentation Scalar InstCombine IPO Hello
+PARALLEL_DIRS = Utils Instrumentation Scalar InstCombine IPO Hello Cs255
 
 include $(LEVEL)/Makefile.config
 
