#!/usr/bin/ruby

# URCC directory
if not Module.const_defined?(:Urcc_path)
  Urcc_path = File.expand_path( File.dirname(__FILE__) )[0..-5]
  $LOAD_PATH.unshift(Urcc_path+"/src")
  # print $LOAD_PATH
end

#LLVM_PATH = "/usr/bin"
#LLVM_PATH = "/localdisk/cs255/llvm-3.3/bin"
#YOUR_CLANG = LLVM_PATH + "/clang"
#YOUR_LLVM_OPT = LLVM_PATH + "/opt"

YOUR_CC = "gcc"

# The main driver for our urcc
require_relative "../src/ir/urccfe.rb"

module Execute
  def execute( cmd )
    puts " #{cmd}"
    `#{cmd}`
  end
end

include Execute

def main
  filename = ARGV[0]
  if not filename or filename[-2..-1] != ".c" then
    puts "Please specify a C file."
    return
  end

  if not File.file?(filename) then
    puts "File #{filename} does not exist."
    return
  end
  
  #if not File.file?(YOUR_CLANG) or not File.file?(YOUR_LLVM_OPT)
  #  puts "Invalid clang/llvm path."
  #  return
  #end

  #clangversion = `#{YOUR_CLANG} --version`.split
  #if not ['3.3', '3.4'].include? clangversion[2]
  #  puts "Please use clang 3.3+"
  #  return
  #end 

  bitcode_file = "#{filename}.ll"
  #execute "#{YOUR_CLANG} -O0 -emit-llvm -c #{filename} -o - | #{YOUR_LLVM_OPT} -reg2mem -S -o #{bitcode_file}"

  prog = URCCFE.new(bitcode_file).astroot

  unopt_file = filename[0..-3]+"_urcc.c"
  file = File.new(unopt_file, "w")
  file << URCCFE.dump_prog(prog)
  file.close

  #execute "#{YOUR_CLANG} -O0 -Wno-format-security -g #{filename} -o #{filename[0..-3]}"

  binary_file = unopt_file[0..-3] + ".bin"
  puts "Generating unoptimized binary '#{binary_file}'"
  execute "#{YOUR_CC} -O0 -Wno-format-security -Wno-implicit-function-declaration -g #{unopt_file} -o #{binary_file}"

  ######################################################
  # Optimizations are here for "prog"

  if $Passes != nil
    $Passes.each do |opt| 
      puts "Invoking #{opt[0]} pass"
      opt[1].call( prog )
    end
  else
    puts 'no optimization specified'
  end

  ######################################################

  opt_file = filename[0..-3]+"_urcc_opt.c"
  file = File.new(opt_file, "w")
  file << URCCFE.dump_prog(prog)
  file.close
  
  opt_binary_file = opt_file[0..-3] + ".bin" 
  puts "Generating optimized binary '#{opt_binary_file}'"
  execute "#{YOUR_CC} -O0 -Wno-format-security -Wno-implicit-function-declaration -g #{opt_file} -o #{opt_binary_file}"

end

main
